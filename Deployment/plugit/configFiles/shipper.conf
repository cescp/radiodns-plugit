input {
  file {
    type => "syslog"
    path => [ "/var/log/*.log", "/var/log/messages", "/var/log/syslog" ]
    tags => [ "radiodns", "syslog" ]
    sincedb_path => "/var/cache/logstash/.sincedb"
  }

  file {
    type => "apachelog"
    path => [ "/var/log/apache2/*.log", "/home/ubuntu/logs/access.log", "/home/ubuntu/logs/error.log" ]
    tags => [ "radiodns", "apache" ]
    sincedb_path => "/var/cache/logstash/.sincedb"
  } 

  file {
    type => "fallbackserverlog"
    path => [ "/home/ubuntu/logs/fallbackserver.log" ]
    tags => [ "radiodns", "rdns-fallback", "rdns-fallback-main" ]
    sincedb_path => "/var/cache/logstash/.sincedb"
  }   

  file {
    type => "radiovisserverlog"
    path => [ "/home/ubuntu/logs/radiovisserver.log" ]
    tags => [ "radiodns", "rdns-radiovis", "rdns-radiovis-main" ]
    sincedb_path => "/var/cache/logstash/.sincedb"
  }   

  file {
    type => "supervisorlog"
    path => [ "/home/ubuntu/logs/supervisord-fallback.log" ]
    tags => [ "radiodns", "supervisord", "rdns-fallback", "rdns-fallback-supervisor" ]
    sincedb_path => "/var/cache/logstash/.sincedb"
  }    

  file {
    type => "supervisorlog"
    path => [ "/home/ubuntu/logs/supervisord-radiovis.log" ]
    tags => [ "radiodns", "supervisord", "rdns-radiovis", "rdns-radiovis-supervisor" ]
    sincedb_path => "/var/cache/logstash/.sincedb"
  }    

}

filter {
  if [type] == "apachelog" {
    grok {
      match => { "message" => "%{IPORHOST:clientip} %{USER:ident} %{USER:auth} \[%{HTTPDATE:timestamp}\] \"(?:%{WORD:verb} %{URIPATHPARAM:request}(?: HTTP/%{NUMBER:httpversion})?|-)\" %{NUMBER:response} (?:%{NUMBER:bytes}|-)" }
    }

    date {
      match => { "timestamp" => "dd/MMM/yyyy:HH:mm:ss Z" }
    }

    grok {
      match => { "request" => "/(?<plugit_secret>\w+)(/|//)(?<plugit_method>\w+)/%{GREEDYDATA:plugit_request}" }
      add_tag => [ "plugit-query" ]
    }
  }

  if [type] == "syslog" {

    grok {
      pattern => [ "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" ]
      add_field => [ "received_at", "%{@timestamp}" ]
      }
      
      date {
        match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
      }
      if !("_grokparsefailure" in [tags]) {
        mutate {
            replace => [ "@source_host", "%{syslog_hostname}" ]
            replace => [ "message", "%{syslog_message}" ]
        }
      }

      mutate {
          remove => [ "syslog_hostname", "syslog_message", "syslog_timestamp" ]
      }


  }
}

output {
  redis { host => "172.31.9.27" data_type => "list" key => "logstash" }
}
